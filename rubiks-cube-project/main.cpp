/*
  TO FILL IN LATER
    Sketch title

    The circuit:
    * Adafruit Feather M4
  * Adafruit NeoPxl8 M4 Featherwing (probably not anymore)
  * Wiring harness to breadboard
  * 5V 10A power supply and NeoPxl8 data to light fronts 

    Last modified 17 April 22
    Gabe, Kevin, Lucas, Neev, Owen, Quinn, and Rishy
  Ms. Hill's B5 Algebra 2, 2021-22

  https://github.com/t-ebag/Rubiks-Cube-Project

*/

// Number of LEDs per side
#define LEDS_PER_FACE 324
// Number of LEDs per panel
#define LEDS_PER_PANEL 36

// Pins for each of the faces
#define F_FACE_PIN 5
#define R_FACE_PIN 6
#define U_FACE_PIN 9
#define L_FACE_PIN 10
#define B_FACE_PIN 11
#define D_FACE_PIN 12

// Import libraries
// #include <Adafruit_NeoPXL8.h> Not using neopxl8
// #include <Adafruit_GFX.h>
// #include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>

// int8_t pins[8] = { PIN_SERIAL1_RX, PIN_SERIAL1_TX, MISO, 13, 5, SDA, A4, A3 }; not using neopxl8

// Create and initialize front object
// Adafruit_NeoPXL8 front(NUM_LED, pins, NEO_GRB); not using neopxl8

Adafruit_NeoPixel front(324, F_FACE_PIN);
Adafruit_NeoPixel right(324, R_FACE_PIN);
Adafruit_NeoPixel up(324, U_FACE_PIN);
Adafruit_NeoPixel left(324, L_FACE_PIN);
Adafruit_NeoPixel back(324, B_FACE_PIN);
Adafruit_NeoPixel down(324, D_FACE_PIN);

 

// Define color values
// **To be filled in later with Art Team**

uint32_t RED = front.Color(255, 0, 0);
uint32_t GREEN = front.Color(0, 255, 0);
uint32_t BLUE = front.Color(0, 0, 255);
uint32_t WHITE = front.Color(255, 255, 200);
uint32_t ORANGE = front.Color(255, 40, 0);
uint32_t YELLOW = front.Color(255, 80, 0);



int faceMatrix[9] = {
    1,2,3,
    4,5,6,
    1,2,3
};

char animationClockwise[17][324] = {
     // 17 frames, 324 characters each

     // The other animation matrix isn't written in the same way our panels are
     // wired, so we have to re-format the data here.
     // This is pretty tedious, but it's the most important thing to do right now.
     // If you want, you could also work on the function which pushes this animation to the cube

     // Each {} group is one frame of animation and each line represents one panel.

    { // Frame 1
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 2
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,4,1,1,1,1,
        1,2,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        2,3,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,7,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,3,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,7,8,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,8,9,
        9,9,9,9,6,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 3
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,4,1,1,
        1,1,2,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        2,2,3,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,7,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,3,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,7,8,8,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,8,9,9,
        9,9,6,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 4
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,4,
        1,1,1,2,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 1,2,2,2,2,2,
        2,2,2,3,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 2,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,8, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,7,8,8,8,
        8,8,8,8,8,9, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,8,9,9,9,
        6,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 5
        1,1,1,1,1,1, 1,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,2,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,1,2,2,2,2,
        2,2,2,2,3,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,2,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,7, 7,7,7,7,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,3,3,3,3, 3,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,8,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,7,8,8,8,8,
        8,8,8,8,9,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,8,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 6
        1,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,2, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,1,2,2,2,
        2,2,2,2,2,3, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,2,3,3,3,
        4,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,6,
        7,7,7,8,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 7,8,8,8,8,8,
        8,8,8,9,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 8,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,9
    },
    { // Frame 7
        4,4,1,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,1,2,2,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,2,3,3,
        7,7,4,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,6,3,3,
        7,7,8,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        8,8,9,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,9,6,6
    },
    { // Frame 8
        4,4,4,4,1,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,1,2,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,2,3,
        7,7,7,7,4,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,6,3,3,3,3,
        7,8,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        8,9,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,9,6,6,6,6
    },
    { // Frame 9
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6
    },
    { // Frame 10
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,7,4,4,4,4,
        4,1,1,1,1,1, 4,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        1,2,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 8,8,7,7,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,3,3,2,2, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,8,9,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,6, 9,9,9,9,9,6,
        6,6,6,6,3,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6
    },
    { // Frame 11
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,7,4,4,
        4,4,1,1,1,1, 4,4,1,1,1,1, 4,1,1,1,1,1, 4,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        1,1,2,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 8,8,7,7,7,7, 8,8,8,8,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,2,2,2,2, 3,3,3,3,2,2, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,8,9,9,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,6, 9,9,9,9,9,6, 9,9,9,9,6,6, 9,9,9,9,6,6,
        6,6,3,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6
    },
    { // Frame 12
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,7,
        4,4,4,1,1,1, 4,4,4,1,1,1, 4,4,1,1,1,1, 4,4,1,1,1,1, 4,1,1,1,1,1, 4,1,1,1,1,1,
        1,1,1,2,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 1,2,2,2,2,2,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 8,8,7,7,7,7, 8,8,8,8,7,7, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 3,3,2,2,2,2, 3,3,3,3,2,2, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        8,8,8,8,8,9, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,8,9,9,9,
        9,9,9,9,9,6, 9,9,9,9,9,6, 9,9,9,9,6,6, 9,9,9,9,6,6, 9,9,9,6,6,6, 9,9,9,6,6,6,
        3,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6
    },
    { // Frame 13
        4,4,4,4,4,4, 4,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,4,1,1, 4,4,4,4,1,1, 4,4,4,1,1,1, 4,4,4,1,1,1, 4,4,1,1,1,1, 4,4,1,1,1,1,
        1,1,1,1,2,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,1,2,2,2,2,
        7,7,7,7,7,7, 7,7,7,7,7,7, 8,8,7,7,7,7, 8,8,8,8,7,7, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 3,3,2,2,2,2, 3,3,3,3,2,2, 3,3,3,3,3,3, 3,3,3,3,3,3,
        8,8,8,8,9,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,8,9,9,9,9,
        9,9,9,9,6,6, 9,9,9,9,6,6, 9,9,9,6,6,6, 9,9,9,6,6,6, 9,9,6,6,6,6, 9,9,6,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,6, 6,6,6,6,6,6
    },
    { // Frame 14
        4,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,4,4,1, 4,4,4,4,4,1, 4,4,4,4,1,1, 4,4,4,4,1,1, 4,4,4,1,1,1, 4,4,4,1,1,1,
        1,1,1,1,1,2, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,1,2,2,2,
        7,7,7,7,7,7, 8,8,7,7,7,7, 8,8,8,8,7,7, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 3,3,2,2,2,2, 3,3,3,3,2,2, 3,3,3,3,3,3,
        8,8,8,9,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 8,9,9,9,9,9,
        9,9,9,6,6,6, 9,9,9,6,6,6, 9,9,6,6,6,6, 9,9,6,6,6,6, 9,6,6,6,6,6, 9,6,6,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,6
    },
    { // Frame 15
        7,7,4,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,1, 4,4,4,4,4,1, 4,4,4,4,1,1, 4,4,4,4,1,1,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,1,2,2,
        8,8,7,7,7,7, 8,8,8,8,7,7, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 3,3,2,2,2,2, 3,3,3,3,2,2,
        8,8,9,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        9,9,6,6,6,6, 9,9,6,6,6,6, 9,6,6,6,6,6, 9,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,6,3,3
    },
    { // Frame 16
        7,7,7,7,4,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,1, 4,4,4,4,4,1,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,1,2,
        8,8,8,8,7,7, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 3,3,2,2,2,2,
        8,9,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        9,6,6,6,6,6, 9,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,6,3,3,3,3
    },
    { // Frame 17
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3
    }

};

char animationCounterClockwise[17][324] = {
    { // Frame 1
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 2
        1,1,1,1,2,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,2,3,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,3,6,
        4,4,4,4,1,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,9,6,6,6,6,
        4,7,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        7,8,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,8,9,9,9,9
    },
    { // Frame 3
        1,1,2,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,2,3,3,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,3,6,6,
        4,4,1,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,9,6,6,
        4,4,7,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        7,7,8,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,8,9,9
    },
    { // Frame 4
        2,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,3, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,2,3,3,3,
        3,3,3,3,3,6, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,3,6,6,6,
        1,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,9,
        4,4,4,7,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 4,7,7,7,7,7,
        7,7,7,8,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 7,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,8
    },
    { // Frame 5
        2,2,2,2,2,2, 2,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,3,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,2,3,3,3,3,
        3,3,3,3,6,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,3,6,6,6,6,
        1,1,1,1,1,1, 1,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,9, 9,9,9,9,9,9,
        4,4,4,4,7,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,4,7,7,7,7,
        7,7,7,7,8,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,7,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,8, 8,8,8,8,8,8
    },
    { // Frame 6
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,1,
        2,2,2,3,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 2,3,3,3,3,3,
        3,3,3,6,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 3,6,6,6,6,6,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        4,4,4,4,4,7, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,4,7,7,7,
        7,7,7,7,7,8, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,7,8,8,8,
        9,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8
    },
    { // Frame 7
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,1,2,2,
        2,2,3,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        3,3,6,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,4,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,6,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,4,7,7,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,7,8,8,
        8,8,9,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8
    },
    { // Frame 8
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,1,2,2,2,2,
        2,3,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        3,6,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,4,1,1,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,9,9,6,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,4,7,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,7,8,
        8,8,8,8,9,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8
    },
    { // Frame 9
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8
    },
    { // Frame 10
        2,2,2,2,3,3, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,3,6,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,6,9,
        1,1,1,1,2,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,8,9,9,9,9,
        1,4,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        4,7,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 7,7,8,8,8,8
    },
    { // Frame 11
        2,2,3,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,3,6,6,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,6,9,9,
        1,1,2,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,8,9,9,
        1,1,4,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        4,4,7,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,7,8,8
    },
    { // Frame 12
        3,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,6, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,3,6,6,6,
        6,6,6,6,6,9, 6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,6,9,9,9,
        2,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,8,
        1,1,1,4,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4, 1,4,4,4,4,4,
        4,4,4,7,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 4,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,7
    },
    { // Frame 13
        3,3,3,3,3,3, 3,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,6,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,3,6,6,6,6,
        6,6,6,6,9,9, 6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9, 6,6,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,1, 1,1,1,1,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,9,9,9,9, 9,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,4,4, 1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4, 1,1,4,4,4,4,
        4,4,4,4,7,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,4,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
    { // Frame 14
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,2,
        3,3,3,6,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 3,6,6,6,6,6,
        6,6,6,9,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9, 6,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,4, 1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,1,4,4,4,
        4,4,4,4,4,7, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,4,7,7,7,
        8,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
    { // Frame 15
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,2,3,3,
        3,3,6,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        6,6,9,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,1,2,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,8,9,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,1,4,4,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,4,7,7,
        7,7,8,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
    { // Frame 16
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 2,2,3,3,3,3,
        3,6,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        6,9,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,1,2,2,2,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,8,8,8,9,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,1,4,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,4,7,
        7,7,7,7,8,8, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
    { // Frame 17
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
};

// SETUP FUNCTION----------------------------------
void setup() {
  front.begin();
  front.setBrightness(64); // 1/3 brightness

    // right.begin(); 
  // right.setBrightness(64);

    // up.begin();
  // up.setBrightness(64);

    // left.begin();
  // left.setBrightness(64);

    // back.begin();
  // back.setBrightness(64);

    // down.begin();
  // down.setBrightness(64);
    // Uncomment the above when we have more faces ready
    
}
// END SETUP FUNCTION------------------------------




// LOOP FUNCTION-----------------------------------
void loop() {


    // Show the face matrix
    showFace(front, faceMatrix);
    front.show();

    // Show the animation
    showAnimation(front, animationClockwise, faceMatrix);

    // Wait
    delay(2000);

    // Update the values of the matrix
    turnFaceClockwise(faceMatrix);
  

  
}
// END LOOP FUNCTION-------------------------------




// SETPANELCOLOR FUNCTION---------------------------------
void setPanelColor(Adafruit_NeoPixel& face, int panelNum, uint32_t color) {

    // setPanelColor: Fills a solid color on one panel of a face.
    // Arguments: Neopixel object pointer, number of panel to change, and a color value

    for (int i=0; i<9; i++) {
        face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color);
    }

}
// END SETPANELCOLOR FUNCTION---------------------




// SHOWFACE FUNCTION----------------------------------------
void showFace(Adafruit_NeoPixel& face, int *matrix) {

    // showFace: Shows a 3x3 matrix on one face.
    // Arguments: Neopixel object pointer, a 3x3 matrix of color values

    for (int i=0; i<9; i++) { 
        uint32_t color;
        if (matrix[i] == 1) {
            color = RED;
        } else if (matrix[i] == 2) {
            color = GREEN;
        } else if (matrix[i] == 3) {
            color = BLUE;
        } else if (matrix[i] == 4) {
            color = WHITE;
        } else if (matrix[i] == 5) {
            color = ORANGE;
        } else if (matrix[i] == 6) {
            color = YELLOW;
        }
        setPanelColor(face, i, color);
    }
  
}
// END SHOWFACE FUNCTION----------------------------------------





// FILLPANELCOLOR FUNCTION---------------------------------
void fillPanelColor(Adafruit_NeoPixel& face, uint32_t color) {

    // fillPanelColor: Extends setPanelColor to fill a solid color on an entire face.
    // Arguments: Neopixel object pointer and a color value

    for (int i=0; i<9; i++) {
        setPanelColor(face, i, color);
    }

}
// END FILLPANELCOLOR FUNCTION-----------------------------





// SETPATTERN FUNCTION-------------------------------------

void setPattern(Adafruit_NeoPixel& face, int panelNum, int matrix[36], uint32_t color1, uint32_t color2) {

    // setPattern: Shows a 6x6 pattern on one panel of a face.
    // Arguments: Neopixel object pointer, number of panel to change, a matrix value, a color for a '1' value, and a color for a '2' value.

    // Loop through the matrix
    for (int i=0; i<35; i++) {

        // What color should the pixel be?

        if (matrix[i] == 1) {
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color1);
        } else if (matrix[i] == 2) {
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color2);
        } else {
            // Blank
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), face.Color(0, 0, 0));
        }
    }
}




// FILLPATTERN FUNCTION------------------------------------
void fillPattern(Adafruit_NeoPixel& face, int matrix[36], uint32_t color1, uint32_t color2) {

    // fillPattern: Shows a 6x6 pattern on all 9 panels of a face.
    // Arguments: Neopixel object pointer, a matrix value, a color for a '1' value, and a color for a '2' value.

    for (int i=0; i<9; i++) {
        setPattern(face, i, matrix, color1, color2);
    }

}
// END FILLPATTERN FUNCTION--------------------------------




// WHEEL FUNCTION------------------------------------------
// Input a value 0 to 255 to get a color value.
// The colors are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
    WheelPos = 255 - WheelPos;
    if(WheelPos < 85)
    {
        return front.Color(255 - WheelPos * 3, 0, WheelPos * 3);
    }
    else if(WheelPos < 170)
    {
        WheelPos -= 85;
        return front.Color(0, WheelPos * 3, 255 - WheelPos * 3);
    }
    else
    {
        WheelPos -= 170;
        return front.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
    }
}
// END WHEEL FUNCTION--------------------------------------





// TURNFACECLOCKWISE FUNCTION------------------------------
/*
1 2 3 
4 5 6
7 8 9
changes to
7 4 1
8 5 2
9 6 3
*/
void turnFaceClockwise(int *matrix) {

    int matrix2[9];

    matrix2[0] = matrix[6];
    matrix2[1]=  matrix[3];
    matrix2[2] = matrix[0];
    matrix2[3] = matrix[7];
    matrix2[4] = matrix[4];
    matrix2[5] = matrix[1];
    matrix2[6] = matrix[8];
    matrix2[7] = matrix[5];
    matrix2[8] = matrix[2];

    //Change the original values of matrix to the rotated ones
    for(byte i=0; i<9; i++){
        matrix[i] = matrix2[i];
    }

}
// END TURNFACECLOCKWISE FUNCTION--------------------------

// TURNFACECOUNTERCLOCKWISE FUNCTION-----------------------

//
/*
1 2 3 
4 5 6
7 8 9
changes to
3 6 9
2 5 8
1 4 7
*/
void turnFaceCounterClockwise(int *matrix) {


    int matrix2[9];

    matrix2[0] = matrix[2];
    matrix2[1]=  matrix[5];
    matrix2[2] = matrix[8];
    matrix2[3] = matrix[1];
    matrix2[4] = matrix[4];
    matrix2[5] = matrix[7];
    matrix2[6] = matrix[0];
    matrix2[7] = matrix[3];
    matrix2[8] = matrix[6];

    //Change the original values of matrix to the rotated ones
    for(int i=0; i<9; i++){
        matrix[i] = matrix2[i];
    }


}


void showAnimation(Adafruit_NeoPixel& face, char animationMatrix[18][324], int *faceMatrix) {

    int originalPanelNumber;
    int originalPanelColor;

    // Every frame: 
    for (int frameNum=0; frameNum<18; frameNum++) {
        // Every light in the frame: 
        for (int lightNum=0; lightNum<324; lightNum++) {

            // This is a number (int) from 1-9
            originalPanelNumber = animationMatrix[frameNum][lightNum];

            // This is a number (char) from 1-6, represents the color of the light we're changing
            originalPanelColor = faceMatrix[originalPanelNumber - 1];

            if (originalPanelColor == 1) {
                face.setPixelColor(lightNum, RED);         
            } else if (originalPanelColor == 2) {
                face.setPixelColor(lightNum, GREEN);         
            } else if (originalPanelColor == 3) {
                face.setPixelColor(lightNum, BLUE);         
            } else if (originalPanelColor == 4) {
                face.setPixelColor(lightNum, WHITE);         
            } else if (originalPanelColor == 5) {
                face.setPixelColor(lightNum, ORANGE);         
            } else if (originalPanelColor == 6) {
                face.setPixelColor(lightNum, YELLOW);         
            }

        }

        // After showing the frame, update the changes and wait
        face.show();
        // Add something here about turning the edges???
        delay(50);
    }

}
// OEND TURNFACECOUNTERCLOCKWISE
//FUNCTION--------------------
// Pass pointers,not the actual variables (use a *)




void turnFaceClockwise(int matrix[6][9], int faceToTurn) {

    // This function turns one face of a matrix clockwise.
    // By the end of this function, the cubeState variable should 
    // contain an altered matrix. 

    // faceToTurn contains an integer from 0 to 5 that specifies which face gets turned.

    int panelOffset = faceToTurn * 9;


    int matrix2[6][9];



    // Make an altered matrix, changing the turned face in question
    matrix2[faceToTurn][0] = matrix[faceToTurn][6];
    matrix2[faceToTurn][1] = matrix[faceToTurn][3];
    matrix2[faceToTurn][2] = matrix[faceToTurn][0];
    matrix2[faceToTurn][3] = matrix[faceToTurn][7];
    matrix2[faceToTurn][4] = matrix[faceToTurn][4];
    matrix2[faceToTurn][5] = matrix[faceToTurn][1];
    matrix2[faceToTurn][6] = matrix[faceToTurn][8];
    matrix2[faceToTurn][7] = matrix[faceToTurn][5];
    matrix2[faceToTurn][8] = matrix[faceToTurn][2];

    // Special cases for turning the edges around
    if (faceToTurn == 0) {
        
        matrix2[1][8] = matrix[2][8];
        matrix2[1][6] = matrix[2][7];
        matrix2[1][7] = matrix[2][6];
        matrix2[2][8] = matrix[3][8];
        matrix2[2][7] = matrix[3][7];
        matrix2[2][6] = matrix[3][6];
        matrix2[3][8] = matrix[4][8];
        matrix2[3][7] = matrix[4][7];
        matrix2[3][6] = matrix[4][6];
        matrix2[4][8] = matrix[1][8];
        matrix2[4][7] = matrix[1][7];
        matrix2[4][6] = matrix[1][6];

    } else if (faceToTurn == 1) {

        matrix2[0][0] = matrix[2][2];
        matrix2[0][1] = matrix[2][5];
        matrix2[0][2] = matrix[2][8];
        matrix2[2][2] = matrix[5][8];
        matrix2[2][5] = matrix[5][7];
        matrix2[2][8] = matrix[5][6];
        matrix2[5][8] = matrix[4][6];
        matrix2[5][7] = matrix[4][3];
        matrix2[5][6] = matrix[4][0];
        matrix2[4][6] = matrix[0][0];
        matrix2[4][3] = matrix[0][1];
        matrix2[4][0] = matrix[0][2];

    } else if (faceToTurn == 2) {

        matrix2[0][2] = matrix[1][2];
        matrix2[0][5] = matrix[1][5];
        matrix2[0][8] = matrix[1][8];
        matrix2[1][2] = matrix[5][2];
        matrix2[1][5] = matrix[5][5];
        matrix2[1][8] = matrix[5][8];
        matrix2[5][2] = matrix[3][6];
        matrix2[5][5] = matrix[3][3];
        matrix2[5][8] = matrix[3][0];
        matrix2[3][6] = matrix[0][2];
        matrix2[3][3] = matrix[0][5];
        matrix2[3][0] = matrix[0][8];
    
    } else if (faceToTurn == 3) {

        matrix2[0][8] = matrix[2][2];
        matrix2[0][7] = matrix[2][5];
        matrix2[0][6] = matrix[2][8];
        matrix2[2][2] = matrix[5][0];
        matrix2[2][5] = matrix[5][1];
        matrix2[2][8] = matrix[5][2];
        matrix2[5][0] = matrix[4][6];
        matrix2[5][1] = matrix[4][3];
        matrix2[5][2] = matrix[4][0];
        matrix2[4][6] = matrix[0][8];
        matrix2[4][3] = matrix[0][7];
        matrix2[4][0] = matrix[0][6];

    } else if (faceToTurn == 4) {

        matrix2[0][0] = matrix[1][0];
        matrix2[0][3] = matrix[1][3];
        matrix2[0][6] = matrix[1][6];
        matrix2[1][0] = matrix[5][0];
        matrix2[1][3] = matrix[5][3];
        matrix2[1][6] = matrix[5][6];
        matrix2[5][0] = matrix[3][8];
        matrix2[5][3] = matrix[3][5];
        matrix2[5][6] = matrix[3][2];
        matrix2[3][8] = matrix[0][0];
        matrix2[3][5] = matrix[0][3];
        matrix2[3][2] = matrix[0][6];

    } else if (faceToTurn == 5) {
        
        matrix2[1][0] = matrix[4][0];
        matrix2[1][1] = matrix[4][1];
        matrix2[1][2] = matrix[4][2];
        matrix2[4][0] = matrix[3][0];
        matrix2[4][1] = matrix[3][1];
        matrix2[4][2] = matrix[3][2];
        matrix2[3][0] = matrix[2][0];
        matrix2[3][1] = matrix[2][1];
        matrix2[3][2] = matrix[2][2];
        matrix2[2][0] = matrix[1][0];
        matrix2[2][1] = matrix[1][1];
        matrix2[2][2] = matrix[1][2];

    }
    
        
    
    //Change the original values of matrix to the rotated ones
    /*for (int i=0; i<6; i++) {
        for (int j=0; j<9; j++) {
            matrix[i][j] = matrix2[i][j];
        }
        
    }
    */
   memcpy (matrix, matrix2, sizeof(matrix));

}


void turnFaceCounterClockwise(int matrix[6][9], int faceToTurn) {

    // This function turns one face of a matrix counter clockwise.
    // By the end of this function, the cubeState variable should 
    // contain an altered matrix. 

    // faceToTurn contains an integer from 0 to 5 that specifies which face gets turned.

    int panelOffset = faceToTurn * 9;


    int matrix2[6][9];
    matrix2[faceToTurn][0] = matrix[faceToTurn][2];
    matrix2[faceToTurn][1] = matrix[faceToTurn][5];
    matrix2[faceToTurn][2] = matrix[faceToTurn][8];
    matrix2[faceToTurn][3] = matrix[faceToTurn][1];
    matrix2[faceToTurn][4] = matrix[faceToTurn][4];
    matrix2[faceToTurn][5] = matrix[faceToTurn][7];
    matrix2[faceToTurn][6] = matrix[faceToTurn][0];
    matrix2[faceToTurn][7] = matrix[faceToTurn][3];
    matrix2[faceToTurn][8] = matrix[faceToTurn][6];



    if (faceToturn == 0) {

        matrix2[1][6] = matrix[4][6];
        matrix2[1][7] = matrix[4][7];
        matrix2[1][8] = matrix[4][8];
        matrix2[4][6] = matrix[3][6];
        matrix2[4][7] = matrix[3][7];
        matrix2[4][8] = matrix[3][8];
        matrix2[3][6] = matrix[2][6];
        matrix2[3][7] = matrix[2][7];
        matrix2[3][8] = matrix[2][8];
        matrix2[2][6] = matrix[1][6];
        matrix2[2][7] = matrix[1][7];
        matrix2[2][8] = matrix[1][8];
    }
    else if (faceToturn == 1) {

        matrix2[0][2] = matrix[2][0];
        matrix2[0][1] = matrix[2][3];
        matrix2[0][0] = matrix[2][6];
        matrix2[2][0] = matrix[5][6];
        matrix2[2][3] = matrix[5][7];
        matrix2[2][6] = matrix[5][8];
        matrix2[5][6] = matrix[4][8];
        matrix2[5][7] = matrix[4][5];
        matrix2[5][8] = matrix[4][2];
        matrix2[4][8] = matrix[0][2];
        matrix2[4][5] = matrix[0][1];
        matrix2[4][2] = matrix[0][0];
    }
    else if (faceToturn == 2) {

        matrix2[0][8] = matrix[3][0];
        matrix2[0][5] = matrix[3][3];
        matrix2[0][2] = matrix[3][6];
        matrix2[3][0] = matrix[5][8];
        matrix2[3][3] = matrix[5][5];
        matrix2[3][6] = matrix[5][2];
        matrix2[5][8] = matrix[1][8];
        matrix2[5][5] = matrix[1][5];
        matrix2[5][2] = matrix[1][2];
        matrix2[1][8] = matrix[0][8];
        matrix2[1][5] = matrix[0][5];
        matrix2[1][2] = matrix[0][2];
    }
    else if (faceToturn == 3) {

        matrix2[0][6] = matrix[4][0];
        matrix2[0][7] = matrix[4][3];
        matrix2[0][8] = matrix[4][6];
        matrix2[4][0] = matrix[5][2];
        matrix2[4][3] = matrix[5][1];
        matrix2[4][6] = matrix[5][0];
        matrix2[5][2] = matrix[2][8];
        matrix2[5][1] = matrix[2][5];
        matrix2[5][0] = matrix[2][2];
        matrix2[2][8] = matrix[0][6];
        matrix2[2][5] = matrix[0][7];
        matrix2[2][2] = matrix[0][8];
    }
    else if (faceToturn == 4) {
        
        matrix2[0][0] = matrix[1][0];
        matrix2[0][3] = matrix[1][3];
        matrix2[0][6] = matrix[1][6];
        matrix2[1][0] = matrix[5][0];
        matrix2[1][3] = matrix[5][3];
        matrix2[1][6] = matrix[5][6];
        matrix2[5][0] = matrix[3][8];
        matrix2[5][3] = matrix[3][5];
        matrix2[5][6] = matrix[3][2];
        matrix2[3][8] = matrix[0][0];
        matrix2[3][5] = matrix[0][3];
        matrix2[3][2] = matrix[0][6];
    }
    else if (faceToturn == 5) {
        matrix2[1][2] = matrix[2][2];
        matrix2[1][1] = matrix[2][1];
        matrix2[1][0] = matrix[2][0];
        matrix2[2][2] = matrix[3][2];
        matrix2[2][1] = matrix[3][1];
        matrix2[2][0] = matrix[3][0];
        matrix2[3][2] = matrix[4][2];
        matrix2[3][1] = matrix[4][1];
        matrix2[3][0] = matrix[4][0];
        matrix2[4][2] = matrix[1][2];
        matrix2[4][1] = matrix[1][1];
        matrix2[4][0] = matrix[1][0];
    }

} 


void displayCubeNotationAnimation(int cubeState[6][9], char *notation) {


    //displayCubeNotationAnimation: Shows a full Rubik's Cube solve.

    front.clear();
    right.clear();
    up.clear();
    left.clear();
    back.clear();
    down.clear();

    for (int strpos=0; strpos<strlen(notation); strpos++) {
        char character = notation[strpos];

        if (character == 'F') {
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, front);
            // Shows the animation
            missingFunction();
        } else if (character == 'f') {
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, front);
            // Shows the animation
            missingFunction();
        } else if (character == 'R') {
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, right);
            // Shows the animation
            missingFunction();
        } else if (character == 'r') {
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, right);
            // Shows the animation
            missingFunction();
        } else if (character == 'U') {
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, up);
            // Shows the animation
            missingFunction();
        } else if (character == 'u') {
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, up);
            // Shows the animation
            missingFunction();
        } else if (character == 'L') {
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, left);
            // Shows the animation
            missingFunction();
        } else if (character == 'l') {
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, left);
            // Shows the animation
            missingFunction();
        } else if (character == 'B') {
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, back);
            // Shows the animation
            missingFunction();
        } else if (character == 'b') {
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, back);
            // Shows the animation
            missingFunction();
        } else if (character == 'D') {
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, down);
            // Shows the animation
            missingFunction();
        } else if (character == 'd') {
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, down);
            // Shows the animation
            missingFunction();
        }
    }




}

void getSerialData() {
     // Gets serial data and passes to the display function


    char notation[20];

    // Is there new serial data?
    if (Serial.available() > 0) {
        notation = Serial.readString();
        displayCubeNotationAnimation(cubeState, notation);
    }
}